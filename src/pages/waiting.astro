<!doctype html>
<html lang="en-GB">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta http-equiv="X-Clacks-Overhead" content="GNU Terry Pratchett" />

		<title>Waiting</title>
		<style>
			html {
				background: #000;
				color: #fff;
				font-family:
					system-ui,
					-apple-system,
					BlinkMacSystemFont,
					"Segoe UI",
					Roboto,
					Oxygen,
					Ubuntu,
					Cantarell,
					"Open Sans",
					"Helvetica Neue",
					sans-serif;
			}

			body {
				display: flex;
				flex-direction: column;
				gap: calc(100vh / 2);
				margin: 0;
				padding-top: calc(100vh / 2 - 5rem);
				padding-bottom: calc(100vh / 2 - 5rem);
				width: 100%;
				height: 100%;
				justify-content: center;
				align-items: center;
			}

			section {
				display: flex;
				flex-direction: column;
				gap: 1rem;
				align-items: center;
				text-align: center;

				p {
					margin: 0;
					font-size: 1.2rem;
					max-width: 42ch;
					margin-left: 1rem;
					margin-right: 1rem;
				}
			}

			.person {
				width: 10rem;
				height: 10rem;
				background: #fff;

				&.given-appointment {
					background: #55ff55;
				}

				&.me {
					background: #ff55ff;
				}
			}
		</style>
	</head>

	<body>
		{
			[...Array(1140 + 13).keys()].map((index: number) => {
				function calcClassName(index: number, appointmentPerYear: number) {
					let className = "person";

					if (index < appointmentPerYear) {
						className += " given-appointment";
					} else if (index == 902) {
						className += " me";
					}

					return className;
				}

				function calcExpectedWait(index: number, appointmentPerYear: number) {
					let position = index - appointmentPerYear;
					let wait = Math.floor(position / appointmentPerYear);

					const givenAppointmentPhrases = [
						"Each one of these squares represents a person.",
						"The Brackenburn Clinic near Belfast is the only one in Northern Ireland to provide healthcare for trans people.",
						`These ${appointmentPerYear} green squares each represent a person who  has been given an initial appointment in the last year.`,
						"These people had to wait roughly 4 years  to even be seen for an initial assessment.",
						"You might have noticed the scrollbar hasn't moved much yet.",
						`The waiting list is currently around ${1140} people long.`,
						`At the current rate of new appointments, it will take ${Math.floor(
							1140 / appointmentPerYear
						)} years for somebody being referred to  the list to receive their initial appointment.`,
						`If you were referred at the youngest possible age of 17 Â½,  you would be <b>${Math.floor(
							(1140 + 13) / appointmentPerYear + 17.5
						)} years old</b> by the time you get your initial appointment.`,
						"Life expectancy in Northern Ireland is around 80 years.",
						"Nobody currently being referred will ever  get an initial appointment under the current system.",
						'Changes are being considered. A new "Lifespan Gender Service". I don\'t see how it will get any more funding than the current system.',
						"We don't need a new system to gatekeep necessary medical care.",
						"We need a system that treats us as people, capable of making our own decisions on what's best for us.",
					];

					const thisYearPhrases = [
						"I've been waiting for years, but I'll finally get my initial appointment this year",
						"I'll get my first appointment this year!",
						"This year, I should get my initial appointment.",
						"I'll get an initial appointment this year",
						"In 2025 I'll finally get my first appointment",
						"Took long enough, but I'm finally getting my first appointment this year",
						"This year, I'll get my first appointment",
						"By the end of 2025 I'll finally get an initial appointment",
						"I shouldn't have to wait this long, but I'm finally getting my initial appointment this year",
						"2025, it took long enough",
						"Getting my first appointment this year!",
						"The first part of the wait is over, I'm getting my initial appointment later this year",
						"It's been years since I was referred, but my initial appointment is finally happening this year",
					];

					if (wait < 0) {
						const givenAppointmentIndex =
							index % givenAppointmentPhrases.length;
						return ` ${givenAppointmentPhrases[givenAppointmentIndex]}`;
					} else if (wait == 0) {
						const nextYearIndex = index - appointmentPerYear;
						return ` ${thisYearPhrases[nextYearIndex % thisYearPhrases.length]}`;
					} else if (index == 902) {
						return `This is me. I'll have to wait ${wait} years for my initial appointment.`;
					} else {
						return `I'll have to wait ${wait} years for my initial appointment.`;
					}
				}

				function calcText(index: number, appointmentPerYear: number) {
					let position = index - appointmentPerYear;
					let wait = Math.floor(position / appointmentPerYear);

					return "";
				}

				const appointmentPerYear = 13;
				return (
					<section>
						<div class={calcClassName(index, appointmentPerYear)} />
						<p
							set:html={`${calcText(index, appointmentPerYear)} ${calcExpectedWait(index, appointmentPerYear)}`}
						/>
					</section>
				);
			})
		}
	</body>
</html>
