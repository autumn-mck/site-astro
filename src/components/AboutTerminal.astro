---
import { Image } from "astro:assets";
import termIco from "./terminal/kitty-dark.png"; // icon from https://github.com/DinkDonk/kitty-icon

interface Props {
	user: string;
	name: string;
	items: Array<{
		name: string;
		textContent: string;
		href: string | undefined;
	}>;
	image: {
		src: ImageMetadata;
		alt: string;
	};
}

const { user, name, items, image } = Astro.props;

const maxLength = items
	.filter((item) => item.name)
	.reduce((max, item) => Math.max(max, item.name.length), 0);
const textMaxLength = items
	.filter((item) => item.textContent)
	.reduce((max, item) => Math.max(max, item.textContent.length), 0);
const extraSpaces = 3;
const dashes = maxLength + textMaxLength + extraSpaces + 1;
---

<div id="window">
	<div id="titleBar">
		<div id="titlebarLeft">
			<Image src={termIco} alt="Terminal Icon" id="windowIcon" />
		</div>
		<div id="titlebarCenter"><span id="titlebarText">{user}:~</span></div>
		<div id="titlebarRight">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				viewBox="0 0 24 24"
				fill="var(--closeCircle)"
				stroke="var(--closeX)"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
				id="closeBtn">
				<circle cx="12" cy="12" r="12" stroke-width="0"></circle>
				<line x1="18" y1="6" x2="6" y2="18"></line>
				<line x1="6" y1="6" x2="18" y2="18"></line>
			</svg>
			<div id="minimizeButton"></div>
			<div id="maximizeButton"></div>
		</div>
	</div>
	<div id="terminal" data-user={user}>
		<div id="terminalContent">
			<pre>[{user} ~]$ whoami</pre>
			<div id="fetch-row">
				<Image id="img" src={image.src} alt={image.alt} format="avif" />
				<pre>
{name}
{"-".repeat(dashes)}
{items.map(item =>
	<p>{item.name}:{" ".repeat(maxLength - item.name.length + extraSpaces)}{item.href && <a href={item.href} rel="noopener" target="_blank">{item.textContent}</a>}{!item.href && <span>{item.textContent}</span>}</p>
)}</pre>
			</div>
			<pre class="noscript-hide">[{user} ~]$ fetch-music</pre>
			<music-display
				class="noscript-hide"
				nowPlayingApi="https://music-display.mck.is/now-playing"
				websocketUrl="wss://music-display.mck.is/now-playing-ws"
			></music-display>
		</div>
		<pre
			id="input"><span id="prompt">[{user} ~]$</span> <span id="typed" /><span id="caret">_</span></pre>
	</div>
</div>

<script>
	import { onEnterKey } from "./terminal/terminal.ts";

	const history = [""];
	let historyIndex = 0;

	function onKeyPressed(event: KeyboardEvent) {
		if (
			["Enter", "Backspace", "ArrowUp", "ArrowDown", " "].includes(event.key)
		) {
			event.preventDefault();
		}

		const typed = document.getElementById("typed")!;
		const caret = document.getElementById("caret")!;
		if (event.key === "Enter") {
			if (typed.textContent) {
				history.unshift(typed.textContent);
				historyIndex = 0;
				history[0] = "";
			}
			onEnterKey(typed.textContent!);
		} else if (event.key === "Backspace") {
			if (event.ctrlKey) {
				// if ctrl + backspace, delete the whole word
				typed.textContent = typed.textContent!.replace(/\S+\s*$/, "");
			} else {
				typed.textContent = typed.textContent!.slice(0, -1);
			}
		} else {
			if (event.key.length === 1 && event.key.charCodeAt(0) >= 32) {
				typed.textContent += event.key;
				history[0] = typed.textContent!;
			}
		}

		if (event.key === "ArrowUp") {
			if (historyIndex < history.length - 1) {
				historyIndex++;
				typed.textContent = history[historyIndex];
			}
		} else if (event.key === "ArrowDown") {
			if (historyIndex > 0) {
				historyIndex--;
				typed.textContent = history[historyIndex];
			}
		}

		caret.style.opacity = "1";
	}

	function closeWindow() {
		const window = document.getElementById("window")!;
		window.style.opacity = "0";
		window.style.pointerEvents = "none";
	}

	function mouseDownOnTitleBar(event: MouseEvent) {
		if (event.button !== 0) return;

		event.preventDefault();

		const window = document.getElementById("window")!;

		const mouseInitialX = event.clientX;
		const mouseInitialY = event.clientY;

		const windowInitialX = window.style.left ? parseInt(window.style.left) : 0;
		const windowInitialY = window.style.top ? parseInt(window.style.top) : 0;

		function moveWindow(event: MouseEvent) {
			const deltaX = event.clientX - mouseInitialX;
			const deltaY = event.clientY - mouseInitialY;

			window.style.left = `${windowInitialX + deltaX}px`;
			window.style.top = `${windowInitialY + deltaY}px`;
		}

		document.addEventListener("mousemove", moveWindow);

		document.addEventListener("mouseup", () => {
			document.removeEventListener("mousemove", moveWindow);
		});
	}

	document.addEventListener("keydown", onKeyPressed);
	document.getElementById("closeBtn")!.addEventListener("click", closeWindow);
	document
		.getElementById("titleBar")!
		.addEventListener("mousedown", mouseDownOnTitleBar);
</script>

<style>
	music-display {
		margin: 0 auto;
	}

	@container style(--noscript: true) {
		.noscript-hide {
			display: none;
		}
	}

	#window {
		border: 2px solid var(--base-below-below);
		border-radius: 0.5rem;
		transition:
			border 1s cubic-bezier(0.075, 0.82, 0.165, 1),
			opacity 0.2s ease;
		overflow: hidden;

		position: relative;
		top: 0;
		left: 0;
		z-index: 1;

		&:hover {
			border: 2px solid var(--accent);
		}
	}

	#titleBar {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		background: var(--base-below-below);

		img {
			width: 1.25rem;
			height: 1.25rem;
		}

		#titlebarText,
		#windowIcon {
			pointer-events: none;
			user-select: none;
		}

		#closeBtn {
			width: 1.25rem;
			height: 1.25rem;
			cursor: pointer;

			transition: all 0.3s ease;

			--closeCircle: transparent;
			--closeX: var(--text);

			&:hover {
				--closeCircle: #ed8796;
				--closeX: var(--base-below-below);
			}
		}

		#titlebarLeft,
		#titlebarCenter,
		#titlebarRight {
			display: flex;
			flex-direction: row;
			align-items: center;
		}
	}

	#titleBar + #terminal {
		padding-top: 0;

		#terminalContent {
			padding-top: 1rem;
		}
	}

	#terminal {
		background: #24273a7a;
		padding: 1rem;

		font-size: 1.1rem;
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
		backdrop-filter: blur(8px);

		p {
			margin: 0;
		}

		pre {
			margin: 0;
		}

		a,
		a:visited {
			text-decoration: none;
			color: var(--accent-2);
		}

		a:hover,
		a:focus {
			text-decoration: underline;
			color: var(--accent);
		}
	}

	#terminalContent {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
		min-width: 32rem;
		max-height: 32rem;
		overflow-y: auto;
	}

	#fetch-row {
		display: flex;
		flex-direction: row;
	}

	#img {
		width: 10rem;
		height: 10rem;
		margin-right: 1rem;
		margin-left: 0;
		border-radius: 0.4rem;
		image-rendering: pixelated;
	}

	#caret {
		animation: caretToggle 1.5s infinite;
		opacity: 1;
	}

	music-display {
		min-height: calc(100px + 1.6rem);
	}

	@keyframes caretToggle {
		0% {
			opacity: 1;
		}
		49% {
			opacity: 1;
		}
		50% {
			opacity: 0;
		}
		100% {
			opacity: 0;
		}
	}

	@media (max-width: 600px) {
		#terminal {
			font-size: 0.9rem;
		}

		#terminalContent {
			min-width: 20rem;
		}

		#img {
			width: 4rem;
			height: 4rem;
		}
	}

	@media (max-width: 500px) {
		#fetch-row {
			flex-direction: column;
			gap: 0.5rem;
		}

		#terminalContent {
			min-width: 16rem;
		}
	}
</style>
